{"ast":null,"code":"import{createPublicClient,createWalletClient,http,getContract,parseAbiItem,custom,UnauthorizedProviderError,decodeFunctionResult}from\"viem\";import token_contract from\"./token_abi.json\";import quiz_contract from\"./quiz_abi.json\";import{chainId,rpc,quiz_address,token_address}from\"./config\";import{amoy}from\"./network\";const{ethereum}=window;const homeUrl=process.env.PUBLIC_URL;const walletClient=createWalletClient({chain:amoy,transport:custom(window.ethereum)});const publicClient=createPublicClient({chain:amoy,transport:http()});const token_abi=token_contract.abi;const quiz_abi=quiz_contract.abi;const token=getContract({address:token_address,abi:token_abi,walletClient,publicClient});const quiz=getContract({address:quiz_address,abi:quiz_abi,walletClient,publicClient});if(window.ethereum){window.ethereum.on(\"chainChanged\",()=>{window.location.reload();});window.ethereum.on(\"accountsChanged\",()=>{window.location.reload();});}const sliceByNumber=(array,number)=>{// 元の配列(今回で言うと変数arrayを指します)を基に、分割して生成する配列の個数を取得する処理です。\n// 今回は元の配列の要素数が10個、分割して生成する配列は2つの要素を持つことを期待しています。\n// 上記のことから今回は、元の配列から5つの配列に分割されることになります。\nconst length=Math.ceil(array.length/number);// new Arrayの引数に上記で取得した配列の個数を渡します。これで配列の中に5つの配列が生成されます。\n// 5つの配列分だけループ処理(mapメソッド)をします。map処理の中でsliceメソッドを使用して、元の配列から新しい配列を作成して返却します。\n// sliceメソッドの中では、要素数2つの配列を生成します。\n// fillメソッドはインデックスのキーを生成するために使用しています。もし使用しない場合はmapメソッドはindexがないため、mapメソッドが機能しません。\nreturn new Array(length).fill().map((_,i)=>array.slice(i*number,(i+1)*number));};class Contracts_MetaMask{async get_chain_id(){return await walletClient.getChainId();}async add_token_wallet(){await window.ethereum.request({method:\"wallet_watchAsset\",params:{type:\"ERC20\",options:{address:token_address,symbol:\"FLT\",decimals:18}}});}async change_network(){try{await walletClient.switchChain({id:amoy.id});}catch(e){//userがrejectした場合\nif(e.code===4001){console.log(e);}else{this.add_network();}}}async add_network(){try{await walletClient.addChain({chain:amoy});}catch(e){console.log(e);}}async get_token_balance(address){try{if(ethereum){console.log(token_address);const balance=await token.read.balanceOf({args:[address]});console.log(balance);console.log(Number(balance)/10**18);//16進数を10進数に変換\nreturn Number(balance)/10**18;}else{console.log(\"Ethereum object does not exist\");}}catch(err){console.log(err);}}async get_address(){try{if(ethereum){return(await walletClient.requestAddresses())[0];}else{console.log(\"Ethereum object does not exist\");}}catch(err){console.log(err);}}async get_token_history(address,start,end){console.log(address,start,end);let account=await this.get_address();try{if(ethereum){console.log(token_address);//取得したクイズを格納する配列\nlet res=[];console.log(start,end);if(start<=end){for(let i=start;i<end;i++){res.push(await token.read.get_user_history({account,args:[address,i]}));}}else{//console.log(\"33\");\nfor(let i=start-1;i>=end;i--){res.push(await token.read.get_user_history({account,args:[address,i]}));}}return res;}else{console.log(\"Ethereum object does not exist\");}}catch(err){console.log(err);}}async get_user_history_len(address){console.log(token_address);let account=await this.get_address();const res=await token.read.get_user_history_len({account,args:[address]});return Number(res);}//ユーザーのデータを取得する\nasync get_user_data(address){try{if(ethereum){let account=await this.get_address();console.log(token_address);const res=await quiz.read.get_user({account,args:[address]});return[res[0],res[1],Number(res[2]),res[3]];}else{console.log(\"Ethereum object does not exist\");}}catch(err){console.log(err);}}async approve(account,amount){try{if(ethereum){console.log(amount);try{const{request}=await publicClient.simulateContract({account,address:token_address,abi:token_abi,functionName:\"approve\",args:[quiz_address,amount]});console.log(\"成功\");return await walletClient.writeContract(request);}catch(e){console.log(e);}}else{console.log(\"Ethereum object does not exist\");}}catch(err){console.log(err);}}async investment_to_quiz(id,amount,answer,isNotPayingOut,numOfStudent,isNotAddingReward,students){console.log([id,amount,isNotPayingOut,numOfStudent,isNotAddingReward]);let res=null;let res2=null;let hash=null;let hash2=null;let is_not_paying_out=null;let is_not_adding_reward=null;amount=Number(amount)*10**18;if(isNotPayingOut===\"false\"){is_not_paying_out=false;}else{is_not_paying_out=true;}if(isNotAddingReward===\"false\"){is_not_adding_reward=false;}else{is_not_adding_reward=true;}try{if(ethereum){let account=await this.get_address();let approval=await token.read.allowance({account,args:[account,quiz_address]});console.log(Number(approval));console.log(amount*numOfStudent);if(Number(approval)>=Number(amount*numOfStudent)){hash=await this._investment_to_quiz(account,id,amount,numOfStudent);if(hash){res=await publicClient.waitForTransactionReceipt({hash});}}else{hash=await this.approve(account,amount*numOfStudent);if(hash){res=await publicClient.waitForTransactionReceipt({hash});hash=await this._investment_to_quiz(account,id,amount,numOfStudent);console.log(hash);if(hash){res=await publicClient.waitForTransactionReceipt({hash});}}}if(is_not_paying_out==false){let addreses=sliceByNumber(students,15);console.log(addreses);for(let i=0;i<addreses.length;i++){hash2=await this._payment_of_reward(account,id,answer,addreses[i]);if(hash){res2=await publicClient.waitForTransactionReceipt({hash});}}if(is_not_adding_reward==false){let reward=(await this.get_quiz_simple(id))[7];console.log(reward);approval=await token.read.allowance({account,args:[account,quiz_address]});console.log(approval);if(Number(approval)>=Number(reward)){hash=await this._addingReward(account,id,reward);if(hash){res=await publicClient.waitForTransactionReceipt({hash});}}else{hash=await this.approve(account,reward);if(hash){res=res=await publicClient.waitForTransactionReceipt({hash});hash=await this._adding_reward(account,id,reward);if(hash){res=await publicClient.waitForTransactionReceipt({hash});}}}}}}else{console.log(\"Ethereum object does not exist\");}}catch(err){console.log(err);}document.location.href=homeUrl+\"/edit_list\";}async _investment_to_quiz(account,id,amount,numOfStudent){console.log([account,id,amount,numOfStudent]);try{if(ethereum){//console.log(title, explanation, thumbnail_url, content, answer_type, answer_data, correct, epochStartSeconds, epochEndSeconds, reward, correct_limit);\ntry{const{request}=await publicClient.simulateContract({account,address:quiz_address,abi:quiz_abi,functionName:\"investment_to_quiz\",args:[id,amount.toString(),numOfStudent]});return await walletClient.writeContract(request);}catch(e){console.log(e);}}else{console.log(\"Ethereum object does not exist\");}}catch(err){console.log(err);}}async _payment_of_reward(account,id,answer,students){console.log([account,id,answer,students]);try{if(ethereum){try{const{request}=await publicClient.simulateContract({account,address:quiz_address,abi:quiz_abi,functionName:\"payment_of_reward\",args:[id,answer,students]});return await walletClient.writeContract(request);}catch(e){console.log(e);}}else{console.log(\"Ethereum object does not exist\");}}catch(err){console.log(err);}}async _adding_reward(account,id,reward){console.log([account,id,reward]);try{if(ethereum){try{const{request}=await publicClient.simulateContract({account,address:quiz_address,abi:quiz_abi,functionName:\"adding_reward\",args:[id]});return await walletClient.writeContract(request);}catch(e){console.log(e);}}else{console.log(\"Ethereum object does not exist\");}}catch(err){console.log(err);}}async create_quiz(title,explanation,thumbnail_url,content,answer_type,answer_data,correct,reply_startline,reply_deadline,reward,correct_limit,setShow){setShow(true);//console.log([title, explanation, thumbnail_url, content, answer_type, answer_data, correct, reply_startline, reply_deadline, reward, correct_limit]);\nlet res=null;let hash=null;reward=reward*10**18;try{if(ethereum){let account=await this.get_address();let approval=await token.read.allowance({account,args:[account,quiz_address]});if(Number(approval)>=Number(reward*correct_limit)){hash=await this._create_quiz(account,title,explanation,thumbnail_url,content,answer_type,answer_data,correct,reply_startline,reply_deadline,reward,correct_limit);if(hash){res=await publicClient.waitForTransactionReceipt({hash});}}else{hash=await this.approve(account,reward*correct_limit);if(hash){res=await publicClient.waitForTransactionReceipt({hash});hash=await this._create_quiz(account,title,explanation,thumbnail_url,content,answer_type,answer_data,correct,reply_startline,reply_deadline,reward,correct_limit);console.log(hash);if(hash){res=await publicClient.waitForTransactionReceipt({hash});}}}console.log(\"create_quiz_cont\");}else{setShow(false);console.log(\"Ethereum object does not exist\");}}catch(err){setShow(false);console.log(err);}document.location.href=homeUrl+\"/answer_quiz/\"+res.logs[2].topics[2];}async _create_quiz(account,title,explanation,thumbnail_url,content,answer_type,answer_data,correct,reply_startline,reply_deadline,reward,correct_limit){const dateStartObj=new Date(reply_startline);const dateEndObj=new Date(reply_deadline);// Date オブジェクトをエポック秒に変換する\nconst epochStartSeconds=Math.floor(dateStartObj.getTime()/1000);const epochEndSeconds=Math.floor(dateEndObj.getTime()/1000);try{if(ethereum){//console.log(title, explanation, thumbnail_url, content, answer_type, answer_data, correct, epochStartSeconds, epochEndSeconds, reward, correct_limit);\nconsole.log(answer_type);try{const{request}=await publicClient.simulateContract({account,address:quiz_address,abi:quiz_abi,functionName:\"create_quiz\",args:[title,explanation,thumbnail_url,content,answer_type,answer_data.toString(),correct,epochStartSeconds,epochEndSeconds,reward,correct_limit]//args: [\"a\", \"a\", \"a\", \"a\", 1, \"a\", \"a\", epochStartSeconds, epochEndSeconds, 2, 2],\n});return await walletClient.writeContract(request);}catch(e){console.log(e);}}else{console.log(\"Ethereum object does not exist\");}}catch(err){console.log(err);}}async edit_quiz(id,owner,title,explanation,thumbnail_url,content,reply_startline,reply_deadline,setShow){setShow(true);//console.log([id, owner, title, explanation, thumbnail_url, content, reply_startline, reply_deadline]);\nlet res=null;let hash=null;try{if(ethereum){let account=await this.get_address();let approval=await token.read.allowance({account,args:[account,quiz_address]});hash=await this._edit_quiz(account,id,owner,title,explanation,thumbnail_url,content,reply_startline,reply_deadline);console.log(hash);if(hash){res=await publicClient.waitForTransactionReceipt({hash});}console.log(res);console.log(\"create_quiz_cont\");}else{setShow(false);console.log(\"Ethereum object does not exist\");}}catch(err){setShow(false);console.log(err);}document.location.href=homeUrl+\"/edit_list\";}async _edit_quiz(account,id,owner,title,explanation,thumbnail_url,content,reply_startline,reply_deadline){const dateStartObj=new Date(reply_startline);const dateEndObj=new Date(reply_deadline);// Date オブジェクトをエポック秒に変換する\nconst epochStartSeconds=Math.floor(dateStartObj.getTime()/1000);const epochEndSeconds=Math.floor(dateEndObj.getTime()/1000);try{if(ethereum){//console.log(title, explanation, thumbnail_url, content, answer_type, answer_data, correct, epochStartSeconds, epochEndSeconds, reward, correct_limit);\ntry{const{request}=await publicClient.simulateContract({account,address:quiz_address,abi:quiz_abi,functionName:\"edit_quiz\",args:[id,owner,title,explanation,thumbnail_url,content,epochStartSeconds,epochEndSeconds]//args: [\"a\", \"a\", \"a\", \"a\", 1, \"a\", \"a\", epochStartSeconds, epochEndSeconds, 2, 2],\n});return await walletClient.writeContract(request);}catch(e){console.log(e);}}else{console.log(\"Ethereum object does not exist\");}}catch(err){console.log(err);}}async create_answer(id,answer,setShow,setContent){console.log(id,answer);try{if(ethereum){let account=await this.get_address();setShow(true);setContent(\"書き込み中...\");let hash=await this._save_answer(account,id,answer);if(hash){// const res1 = await quiz.read.post_answer_view({account,args:[id, answer.toString()]})\n// console.log(res1);\n// if (res1 == true) {\n//     setContent(\"正解です！待機すると、マイページに遷移します\");\n// }\n// else {\n//     setContent(\"不正解です。待機すると、マイページに遷移します\");\n// }\nlet res=await publicClient.waitForTransactionReceipt({hash});console.log(res);//document.location.href = \"/user_page/\" + account;\ndocument.location.href=homeUrl+\"/list_quiz\";}console.log(\"create_answer_cont\");}else{console.log(\"Ethereum object does not exist\");}}catch(err){console.log(err);}setShow(false);}async _save_answer(account,id,answer){try{const{request}=await publicClient.simulateContract({account,address:quiz_address,abi:quiz_abi,functionName:\"save_answer\",args:[id,answer.toString()]});console.log(\"正常そう\");return await walletClient.writeContract(request);}catch(e){console.log(e);}}async _post_answer(account,id,answer){try{const{request}=await publicClient.simulateContract({account,address:quiz_address,abi:quiz_abi,functionName:\"post_answer\",args:[id,answer.toString()]});console.log(\"正常そう\");return await walletClient.writeContract(request);}catch(e){console.log(e);}}async get_quiz_all_data(id){return await quiz.read.get_quiz_all_data({args:[id]});}async get_quiz(id){const answer_typr=await quiz.read.get_quiz_answer_type({args:[id]});const res=await quiz.read.get_quiz({args:[id]});const res2=await this.get_confirm_answer(id);return[...res,answer_typr,...res2];}async get_quiz_simple(id){return await quiz.read.get_quiz_simple({args:[id]});}async get_is_payment(id){return await quiz.read.get_is_payment({args:[id]});}async get_confirm_answer(id){return await quiz.read.get_confirm_answer({args:[id]});}async get_quiz_all_data_list(start,end){//取得したクイズを格納する配列\nlet res=[];let account=await this.get_address();console.log(start,end);if(start<=end){for(let i=start;i<end;i++){console.log(i);res.push(await quiz.read.get_quiz_all_data({account,args:[i]}));console.log(res);}}else{for(let i=start-1;i>=end;i--){console.log(i);res.push(await quiz.read.get_quiz_all_data({account,args:[i]}));console.log(res);}}return res;}//startからendまでのクイズを取得\nasync get_quiz_list(start,end){//取得したクイズを格納する配列\nlet res=[];let account=await this.get_address();console.log(start,end);if(start<=end){for(let i=start;i<end;i++){console.log(i);res.push(await quiz.read.get_quiz_simple({account,args:[i]}));console.log(res);}}else{for(let i=start-1;i>=end;i--){console.log(i);res.push(await quiz.read.get_quiz_simple({account,args:[i]}));console.log(res);}}return res;}async get_quiz_length(){return await quiz.read.get_quiz_length();}async get_num_of_students(){return Number(await quiz.read.get_num_of_students());}async add_student(address){console.log(address);try{if(ethereum){try{let account=await this.get_address();const{request}=await publicClient.simulateContract({account,address:quiz_address,abi:quiz_abi,functionName:\"add_student\",args:[address]});return await walletClient.writeContract(request);}catch(e){console.log(e);}}else{console.log(\"Ethereum object does not exist\");}}catch(err){console.log(err);}}async add_teacher(address){try{if(ethereum){try{let account=await this.get_address();const{request}=await publicClient.simulateContract({account,address:quiz_address,abi:quiz_abi,functionName:\"add_teacher\",args:[address]});return await walletClient.writeContract(request);}catch(e){console.log(e);}}else{console.log(\"Ethereum object does not exist\");}}catch(err){console.log(err);}}async get_teachers(){try{if(ethereum){let account=await this.get_address();return await quiz.read.get_teacher_all({account,args:[]});}else{console.log(\"Ethereum object does not exist\");}}catch(err){console.log(err);}}async get_results(){try{if(ethereum){let account=await this.get_address();let res=await quiz.read.get_student_results({account,args:[]});console.log(res);return res;}else{console.log(\"Ethereum object does not exist\");}}catch(err){console.log(err);}}async isTeacher(){try{if(ethereum){let account=await this.get_address();return await quiz.read._isTeacher({account,args:[]});}else{console.log(\"Ethereum object does not exist\");}}catch(err){console.log(err);}}async get_only_student_results(){try{if(ethereum){let account=await this.get_address();let res=await quiz.read.get_only_student_results({account,args:[]});console.log(res);for(let i=0;i<res.length;i++){res[i]=Number(res[i]);}await res.sort(function(a,b){return b-a;});console.log(res);return res;}else{console.log(\"Ethereum object does not exist\");}}catch(err){console.log(err);}}async get_rank(result){try{if(ethereum){let results=await this.get_only_student_results();for(let i=0;i<results.length;i++){if(result==results[i])return i+1;}}else{console.log(\"Ethereum object does not exists\");}}catch(err){console.log(err);}}async get_respondentCount_and_respondentLimit(id){return await quiz.read.get_respondentCount_and_respondentLimit({args:[id]});}//ここから変更\nasync get_student_answer_hash(student,id){try{if(ethereum){let account=await this.get_address();let res=await quiz.read.get_student_answer_hash({account,args:[student,id]});return res;}else{console.log(\"Ethereum object does not exists\");}}catch(err){console.log(err);}}async get_student_list(){try{if(ethereum){let account=await this.get_address();let res=await quiz.read.get_student_all({account,args:[]});return res;}else{console.log(\"Ethereum object does not exists\");}}catch(err){console.log(err);}}async get_students_answer_hash_list(students,id){try{if(ethereum){let res={};console.log(students[1]);for(let i=0;i<students.length;i++){res[students[i]]=await this.get_student_answer_hash(students[i],id);}return res;}else{console.log(\"Ethereum object does not exists\");}}catch(err){console.log(err);}}//ここまで変更\nasync get_data_for_survey_users(){try{if(ethereum){let account=await this.get_address();let res=await quiz.read.get_data_for_survey_users({account,args:[]});return res;}else{console.log(\"Ethereum object does not exists\");}}catch(err){console.log(err);}}async get_data_for_survey_quizs(){try{if(ethereum){let account=await this.get_address();let res=await quiz.read.get_data_for_survey_quizs({account,args:[]});return res;}else{console.log(\"Ethereum object does not exists\");}}catch(err){console.log(err);}}async create_bulk_quizzes(mainTitle,titles,explanations,thumbnailUrls,contents,answerTypes,answerDataArray,corrects,replyStartline,replyDeadline,reward,correctLimit,setShow){// 基本的な引数の型とフォーマットのチェック\nif(typeof mainTitle!=='string')throw new Error('mainTitle must be a string');if(!Array.isArray(titles)||!titles.every(t=>typeof t==='string'))throw new Error('titles must be an array of strings');if(!Array.isArray(explanations)||!explanations.every(e=>typeof e==='string'))throw new Error('explanations must be an array of strings');if(!Array.isArray(thumbnailUrls)||!thumbnailUrls.every(t=>typeof t==='string'))throw new Error('thumbnailUrls must be an array of strings');if(!Array.isArray(contents)||!contents.every(c=>typeof c==='string'))throw new Error('contents must be an array of strings');if(!Array.isArray(answerTypes)||!answerTypes.every(a=>typeof a==='number'))throw new Error('answerTypes must be an array of numbers');if(!Array.isArray(answerDataArray)||!answerDataArray.every(a=>typeof a==='string'))throw new Error('answerDataArray must be an array of strings');if(!Array.isArray(corrects)||!corrects.every(c=>typeof c==='string'))throw new Error('corrects must be an array of strings');if(typeof replyStartline!=='string'||isNaN(Date.parse(replyStartline)))throw new Error('replyStartline must be a valid date string');if(typeof replyDeadline!=='string'||isNaN(Date.parse(replyDeadline)))throw new Error('replyDeadline must be a valid date string');if(typeof reward!=='number')throw new Error('reward must be a number');if(typeof correctLimit!=='number')throw new Error('correctLimit must be a number');if(typeof setShow!=='function')throw new Error('setShow must be a function');// 配列の長さのチェック\nconst arrayLength=titles.length;if(![explanations,thumbnailUrls,contents,answerTypes,answerDataArray,corrects].every(arr=>arr.length===arrayLength)){throw new Error('All input arrays must have the same length');}setShow(true);let res=null;let hash=null;reward=reward*10**18;const dateStartObj=new Date(replyStartline);const dateEndObj=new Date(replyDeadline);const epochStartSeconds=Math.floor(dateStartObj.getTime()/1000);const epochEndSeconds=Math.floor(dateEndObj.getTime()/1000);const quizDataArray=titles.map((title,index)=>({title:title,explanation:explanations[index],thumbnail_url:thumbnailUrls[index],content:contents[index],answer_type:answerTypes[index],answer_data:answerDataArray[index],answer:corrects[index]}));try{if(ethereum){let account=await this.get_address();let approval=await token.read.allowance({account,args:[account,quiz_address]});if(Number(approval)>=Number(reward*correctLimit*quizDataArray.length)){hash=await this._create_bulk_quizzes(account,mainTitle,quizDataArray,epochStartSeconds,epochEndSeconds,reward,correctLimit);if(hash){res=await publicClient.waitForTransactionReceipt({hash});}}else{hash=await this.approve(account,reward*correctLimit*quizDataArray.length);if(hash){res=await publicClient.waitForTransactionReceipt({hash});hash=await this._create_bulk_quizzes(account,mainTitle,quizDataArray,epochStartSeconds,epochEndSeconds,reward,correctLimit);if(hash){res=await publicClient.waitForTransactionReceipt({hash});}}}}else{setShow(false);console.log(\"Ethereum object does not exist\");}}catch(err){setShow(false);console.log(err);}document.location.href=homeUrl+\"/list_quiz\";}// _create_bulk_quizzes ヘルパー関数\nasync _create_bulk_quizzes(account,mainTitle,quizDataArray,startlineAfterEpoch,timelimitAfterEpoch,reward,respondentLimit){try{const{request}=await publicClient.simulateContract({account,address:quiz_address,abi:quiz_abi,functionName:\"create_bulk_quizzes\",args:[mainTitle,quizDataArray,startlineAfterEpoch,timelimitAfterEpoch,reward,respondentLimit]});return await walletClient.writeContract(request);}catch(e){console.log(\"Error in _create_bulk_quizzes\",e);}}async bulkSubmitAnswers(answers){if(!ethereum)return console.error(\"Ethereum provider is not available\");try{const account=await this.get_address();const{request}=await publicClient.simulateContract({account,address:quiz_address,abi:quiz_abi,functionName:\"bulkSubmitAnswers\",args:[answers]});return await walletClient.writeContract(request);}catch(e){console.error(\"Error in bulkSubmitAnswers:\",e);}}async distributeRewards(quizId,winners){if(!ethereum)return console.error(\"Ethereum provider is not available\");try{const account=await this.get_address();const{request}=await publicClient.simulateContract({account,address:quiz_address,abi:quiz_abi,functionName:\"distributeRewards\",args:[quizId,winners]});return await walletClient.writeContract(request);}catch(e){console.error(\"Error in distributeRewards:\",e);}}}export{Contracts_MetaMask};","map":{"version":3,"names":["createPublicClient","createWalletClient","http","getContract","parseAbiItem","custom","UnauthorizedProviderError","decodeFunctionResult","token_contract","quiz_contract","chainId","rpc","quiz_address","token_address","amoy","ethereum","window","homeUrl","process","env","PUBLIC_URL","walletClient","chain","transport","publicClient","token_abi","abi","quiz_abi","token","address","quiz","on","location","reload","sliceByNumber","array","number","length","Math","ceil","Array","fill","map","_","i","slice","Contracts_MetaMask","get_chain_id","getChainId","add_token_wallet","request","method","params","type","options","symbol","decimals","change_network","switchChain","id","e","code","console","log","add_network","addChain","get_token_balance","balance","read","balanceOf","args","Number","err","get_address","requestAddresses","get_token_history","start","end","account","res","push","get_user_history","get_user_history_len","get_user_data","get_user","approve","amount","simulateContract","functionName","writeContract","investment_to_quiz","answer","isNotPayingOut","numOfStudent","isNotAddingReward","students","res2","hash","hash2","is_not_paying_out","is_not_adding_reward","approval","allowance","_investment_to_quiz","waitForTransactionReceipt","addreses","_payment_of_reward","reward","get_quiz_simple","_addingReward","_adding_reward","document","href","toString","create_quiz","title","explanation","thumbnail_url","content","answer_type","answer_data","correct","reply_startline","reply_deadline","correct_limit","setShow","_create_quiz","logs","topics","dateStartObj","Date","dateEndObj","epochStartSeconds","floor","getTime","epochEndSeconds","edit_quiz","owner","_edit_quiz","create_answer","setContent","_save_answer","_post_answer","get_quiz_all_data","get_quiz","answer_typr","get_quiz_answer_type","get_confirm_answer","get_is_payment","get_quiz_all_data_list","get_quiz_list","get_quiz_length","get_num_of_students","add_student","add_teacher","get_teachers","get_teacher_all","get_results","get_student_results","isTeacher","_isTeacher","get_only_student_results","sort","a","b","get_rank","result","results","get_respondentCount_and_respondentLimit","get_student_answer_hash","student","get_student_list","get_student_all","get_students_answer_hash_list","get_data_for_survey_users","get_data_for_survey_quizs","create_bulk_quizzes","mainTitle","titles","explanations","thumbnailUrls","contents","answerTypes","answerDataArray","corrects","replyStartline","replyDeadline","correctLimit","Error","isArray","every","t","c","isNaN","parse","arrayLength","arr","quizDataArray","index","_create_bulk_quizzes","startlineAfterEpoch","timelimitAfterEpoch","respondentLimit","bulkSubmitAnswers","answers","error","distributeRewards","quizId","winners"],"sources":["/Users/toji.inoue/Desktop/卒業研究_井上登司フォルダ/web3-sotuken/src/contract/contracts.jsx"],"sourcesContent":["import { createPublicClient, createWalletClient, http, getContract, parseAbiItem, custom, UnauthorizedProviderError, decodeFunctionResult } from \"viem\";\nimport token_contract from \"./token_abi.json\";\nimport quiz_contract from \"./quiz_abi.json\";\nimport { chainId, rpc, quiz_address, token_address } from \"./config\";\nimport { amoy } from \"./network\";\n\nconst { ethereum } = window;\nconst homeUrl = process.env.PUBLIC_URL;\n\nconst walletClient = createWalletClient({\n    chain: amoy,\n    transport: custom(window.ethereum),\n});\n\nconst publicClient = createPublicClient({\n    chain: amoy,\n    transport: http(),\n});\n\nconst token_abi = token_contract.abi;\nconst quiz_abi = quiz_contract.abi;\n\nconst token = getContract({\n    address: token_address,\n    abi: token_abi,\n    walletClient,\n    publicClient,\n});\n\nconst quiz = getContract({\n    address: quiz_address,\n    abi: quiz_abi,\n    walletClient,\n    publicClient,\n});\n\nif (window.ethereum) {\n    window.ethereum.on(\"chainChanged\", () => {\n        window.location.reload();\n    });\n    window.ethereum.on(\"accountsChanged\", () => {\n        window.location.reload();\n    });\n}\n\nconst sliceByNumber = (array, number) => {\n    // 元の配列(今回で言うと変数arrayを指します)を基に、分割して生成する配列の個数を取得する処理です。\n    // 今回は元の配列の要素数が10個、分割して生成する配列は2つの要素を持つことを期待しています。\n    // 上記のことから今回は、元の配列から5つの配列に分割されることになります。\n    const length = Math.ceil(array.length / number);\n\n    // new Arrayの引数に上記で取得した配列の個数を渡します。これで配列の中に5つの配列が生成されます。\n    // 5つの配列分だけループ処理(mapメソッド)をします。map処理の中でsliceメソッドを使用して、元の配列から新しい配列を作成して返却します。\n    // sliceメソッドの中では、要素数2つの配列を生成します。\n    // fillメソッドはインデックスのキーを生成するために使用しています。もし使用しない場合はmapメソッドはindexがないため、mapメソッドが機能しません。\n    return new Array(length)\n        .fill()\n        .map((_, i) => array.slice(i * number, (i + 1) * number));\n};\n\nclass Contracts_MetaMask {\n    async get_chain_id() {\n        return await walletClient.getChainId();\n    }\n    async add_token_wallet() {\n        await window.ethereum.request({\n            method: \"wallet_watchAsset\",\n            params: {\n                type: \"ERC20\",\n                options: {\n                    address: token_address,\n                    symbol: \"FLT\",\n                    decimals: 18,\n                },\n            },\n        });\n    }\n\n    async change_network() {\n        try {\n            await walletClient.switchChain({ id: amoy.id });\n        } catch (e) {\n            //userがrejectした場合\n            if (e.code === 4001) {\n                console.log(e);\n            } else {\n                this.add_network();\n            }\n        }\n    }\n    async add_network() {\n        try {\n            await walletClient.addChain({ chain: amoy });\n        } catch (e) {\n            console.log(e);\n        }\n    }\n\n    async get_token_balance(address) {\n        try {\n            if (ethereum) {\n                console.log(token_address);\n                const balance = await token.read.balanceOf({ args: [address] });\n                console.log(balance);\n                console.log(Number(balance) / 10 ** 18);\n                //16進数を10進数に変換\n                return Number(balance) / 10 ** 18;\n            } else {\n                console.log(\"Ethereum object does not exist\");\n            }\n        } catch (err) {\n            console.log(err);\n        }\n    }\n\n    async get_address() {\n        try {\n            if (ethereum) {\n                return (await walletClient.requestAddresses())[0];\n            } else {\n                console.log(\"Ethereum object does not exist\");\n            }\n        } catch (err) {\n            console.log(err);\n        }\n    }\n\n    async get_token_history(address, start, end) {\n        console.log(address, start, end);\n        let account = await this.get_address();\n        try {\n            if (ethereum) {\n                console.log(token_address);\n                //取得したクイズを格納する配列\n                let res = [];\n\n                console.log(start, end);\n                if (start <= end) {\n                    for (let i = start; i < end; i++) {\n                        res.push(await token.read.get_user_history({ account, args: [address, i] }));\n                    }\n                } else {\n                    //console.log(\"33\");\n                    for (let i = start - 1; i >= end; i--) {\n                        res.push(await token.read.get_user_history({ account, args: [address, i] }));\n                    }\n                }\n\n                return res;\n            } else {\n                console.log(\"Ethereum object does not exist\");\n            }\n        } catch (err) {\n            console.log(err);\n        }\n    }\n\n    async get_user_history_len(address) {\n        console.log(token_address);\n        let account = await this.get_address();\n        const res = await token.read.get_user_history_len({ account, args: [address] });\n        return Number(res);\n    }\n\n    //ユーザーのデータを取得する\n    async get_user_data(address) {\n        try {\n            if (ethereum) {\n                let account = await this.get_address();\n                console.log(token_address);\n                const res = await quiz.read.get_user({ account, args: [address] });\n                return [res[0], res[1], Number(res[2]), res[3]];\n            } else {\n                console.log(\"Ethereum object does not exist\");\n            }\n        } catch (err) {\n            console.log(err);\n        }\n    }\n\n    async approve(account, amount) {\n        try {\n            if (ethereum) {\n                console.log(amount);\n                try {\n                    const { request } = await publicClient.simulateContract({\n                        account,\n                        address: token_address,\n                        abi: token_abi,\n                        functionName: \"approve\",\n                        args: [quiz_address, amount],\n                    });\n                    console.log(\"成功\");\n                    return await walletClient.writeContract(request);\n                } catch (e) {\n                    console.log(e);\n                }\n            } else {\n                console.log(\"Ethereum object does not exist\");\n            }\n        } catch (err) {\n            console.log(err);\n        }\n    }\n\n    async investment_to_quiz(id, amount, answer, isNotPayingOut, numOfStudent, isNotAddingReward, students) {\n        console.log([id, amount, isNotPayingOut, numOfStudent, isNotAddingReward]);\n        let res = null;\n        let res2 = null;\n        let hash = null;\n        let hash2 = null;\n        let is_not_paying_out = null;\n        let is_not_adding_reward = null;\n        amount = Number(amount) * 10 ** 18;\n\n        if (isNotPayingOut === \"false\") {\n            is_not_paying_out = false;\n        } else {\n            is_not_paying_out = true;\n        }\n        if (isNotAddingReward === \"false\") {\n            is_not_adding_reward = false;\n        } else {\n            is_not_adding_reward = true;\n        }\n\n        try {\n            if (ethereum) {\n                let account = await this.get_address();\n                let approval = await token.read.allowance({ account, args: [account, quiz_address] });\n                console.log(Number(approval));\n                console.log(amount * numOfStudent);\n\n                if (Number(approval) >= Number(amount * numOfStudent)) {\n                    hash = await this._investment_to_quiz(account, id, amount, numOfStudent);\n                    if (hash) {\n                        res = await publicClient.waitForTransactionReceipt({ hash });\n                    }\n                } else {\n                    hash = await this.approve(account, amount * numOfStudent);\n                    if (hash) {\n                        res = await publicClient.waitForTransactionReceipt({ hash });\n                        hash = await this._investment_to_quiz(account, id, amount, numOfStudent);\n                        console.log(hash);\n                        if (hash) {\n                            res = await publicClient.waitForTransactionReceipt({ hash });\n                        }\n                    }\n                }\n\n                if (is_not_paying_out == false) {\n                    let addreses = sliceByNumber(students, 15);\n                    console.log(addreses)\n                    for (let i = 0; i < addreses.length; i++) {\n                        hash2 = await this._payment_of_reward(account, id, answer, addreses[i]);\n                        if (hash) {\n                            res2 = await publicClient.waitForTransactionReceipt({ hash });\n                        }\n                    }\n                    if (is_not_adding_reward == false) {\n                        let reward = (await this.get_quiz_simple(id))[7];\n                        console.log(reward);\n                        approval = await token.read.allowance({ account, args: [account, quiz_address] });\n                        console.log(approval);\n                        if (Number(approval) >= Number(reward)) {\n                            hash = await this._addingReward(account, id, reward);\n                            if (hash) {\n                                res = await publicClient.waitForTransactionReceipt({ hash });\n                            }\n                        } else {\n                            hash = await this.approve(account, reward);\n                            if (hash) {\n                                res = res = await publicClient.waitForTransactionReceipt({ hash });\n                                hash = await this._adding_reward(account, id, reward);\n                                if (hash) {\n                                    res = await publicClient.waitForTransactionReceipt({ hash });\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                console.log(\"Ethereum object does not exist\");\n            }\n        } catch (err) {\n            console.log(err);\n        }\n        document.location.href = homeUrl + \"/edit_list\";\n    }\n\n    async _investment_to_quiz(account, id, amount, numOfStudent) {\n        console.log([account, id, amount, numOfStudent])\n        try {\n            if (ethereum) {\n                //console.log(title, explanation, thumbnail_url, content, answer_type, answer_data, correct, epochStartSeconds, epochEndSeconds, reward, correct_limit);\n                try {\n                    const { request } = await publicClient.simulateContract({\n                        account,\n                        address: quiz_address,\n                        abi: quiz_abi,\n                        functionName: \"investment_to_quiz\",\n                        args: [id, amount.toString(), numOfStudent],\n                    });\n\n                    return await walletClient.writeContract(request);\n                } catch (e) {\n                    console.log(e);\n                }\n            } else {\n                console.log(\"Ethereum object does not exist\");\n            }\n        } catch (err) {\n            console.log(err);\n        }\n    }\n\n    async _payment_of_reward(account, id, answer, students) {\n        console.log([account, id, answer, students]);\n        try {\n            if (ethereum) {\n                try {\n                    const { request } = await publicClient.simulateContract({\n                        account,\n                        address: quiz_address,\n                        abi: quiz_abi,\n                        functionName: \"payment_of_reward\",\n                        args: [id, answer, students],\n                    });\n\n                    return await walletClient.writeContract(request);\n                } catch (e) {\n                    console.log(e);\n                }\n            } else {\n                console.log(\"Ethereum object does not exist\");\n            }\n        } catch (err) {\n            console.log(err);\n        }\n    }\n\n    async _adding_reward(account, id, reward) {\n        console.log([account, id, reward]);\n        try {\n            if (ethereum) {\n                try {\n                    const { request } = await publicClient.simulateContract({\n                        account,\n                        address: quiz_address,\n                        abi: quiz_abi,\n                        functionName: \"adding_reward\",\n                        args: [id],\n                    });\n\n                    return await walletClient.writeContract(request);\n                } catch (e) {\n                    console.log(e);\n                }\n            } else {\n                console.log(\"Ethereum object does not exist\");\n            }\n        } catch (err) {\n            console.log(err);\n        }\n    }\n\n    async create_quiz(title, explanation, thumbnail_url, content, answer_type, answer_data, correct, reply_startline, reply_deadline, reward, correct_limit, setShow) {\n        setShow(true);\n        //console.log([title, explanation, thumbnail_url, content, answer_type, answer_data, correct, reply_startline, reply_deadline, reward, correct_limit]);\n        let res = null;\n        let hash = null;\n        reward = reward * 10 ** 18;\n        try {\n            if (ethereum) {\n                let account = await this.get_address();\n                let approval = await token.read.allowance({ account, args: [account, quiz_address] });\n\n                if (Number(approval) >= Number(reward * correct_limit)) {\n                    hash = await this._create_quiz(account, title, explanation, thumbnail_url, content, answer_type, answer_data, correct, reply_startline, reply_deadline, reward, correct_limit);\n                    if (hash) {\n                        res = await publicClient.waitForTransactionReceipt({ hash });\n                    }\n                } else {\n                    hash = await this.approve(account, reward * correct_limit);\n                    if (hash) {\n                        res = await publicClient.waitForTransactionReceipt({ hash });\n                        hash = await this._create_quiz(account, title, explanation, thumbnail_url, content, answer_type, answer_data, correct, reply_startline, reply_deadline, reward, correct_limit);\n                        console.log(hash);\n                        if (hash) {\n                            res = await publicClient.waitForTransactionReceipt({ hash });\n                        }\n                    }\n                }\n                console.log(\"create_quiz_cont\");\n            } else {\n                setShow(false);\n                console.log(\"Ethereum object does not exist\");\n            }\n        } catch (err) {\n            setShow(false);\n            console.log(err);\n        }\n        document.location.href = homeUrl + \"/answer_quiz/\" + res.logs[2].topics[2];\n    }\n\n    async _create_quiz(account, title, explanation, thumbnail_url, content, answer_type, answer_data, correct, reply_startline, reply_deadline, reward, correct_limit) {\n        const dateStartObj = new Date(reply_startline);\n        const dateEndObj = new Date(reply_deadline);\n\n        // Date オブジェクトをエポック秒に変換する\n        const epochStartSeconds = Math.floor(dateStartObj.getTime() / 1000);\n        const epochEndSeconds = Math.floor(dateEndObj.getTime() / 1000);\n        try {\n            if (ethereum) {\n                //console.log(title, explanation, thumbnail_url, content, answer_type, answer_data, correct, epochStartSeconds, epochEndSeconds, reward, correct_limit);\n                console.log(answer_type);\n                try {\n                    const { request } = await publicClient.simulateContract({\n                        account,\n                        address: quiz_address,\n                        abi: quiz_abi,\n                        functionName: \"create_quiz\",\n                        args: [title, explanation, thumbnail_url, content, answer_type, answer_data.toString(), correct, epochStartSeconds, epochEndSeconds, reward, correct_limit],\n                        //args: [\"a\", \"a\", \"a\", \"a\", 1, \"a\", \"a\", epochStartSeconds, epochEndSeconds, 2, 2],\n                    });\n\n                    return await walletClient.writeContract(request);\n                } catch (e) {\n                    console.log(e);\n                }\n            } else {\n                console.log(\"Ethereum object does not exist\");\n            }\n        } catch (err) {\n            console.log(err);\n        }\n    }\n\n    async edit_quiz(id, owner, title, explanation, thumbnail_url, content, reply_startline, reply_deadline, setShow) {\n        setShow(true);\n        //console.log([id, owner, title, explanation, thumbnail_url, content, reply_startline, reply_deadline]);\n        let res = null;\n        let hash = null;\n        try {\n            if (ethereum) {\n                let account = await this.get_address();\n                let approval = await token.read.allowance({ account, args: [account, quiz_address] });\n\n                hash = await this._edit_quiz(account, id, owner, title, explanation, thumbnail_url, content, reply_startline, reply_deadline);\n                console.log(hash);\n                if (hash) {\n                    res = await publicClient.waitForTransactionReceipt({ hash });\n                }\n                console.log(res);\n\n                console.log(\"create_quiz_cont\");\n            } else {\n                setShow(false);\n                console.log(\"Ethereum object does not exist\");\n            }\n        } catch (err) {\n            setShow(false);\n            console.log(err);\n        }\n        document.location.href = homeUrl + \"/edit_list\";\n    }\n\n    async _edit_quiz(account, id, owner, title, explanation, thumbnail_url, content, reply_startline, reply_deadline) {\n        const dateStartObj = new Date(reply_startline);\n        const dateEndObj = new Date(reply_deadline);\n\n        // Date オブジェクトをエポック秒に変換する\n        const epochStartSeconds = Math.floor(dateStartObj.getTime() / 1000);\n        const epochEndSeconds = Math.floor(dateEndObj.getTime() / 1000);\n        try {\n            if (ethereum) {\n                //console.log(title, explanation, thumbnail_url, content, answer_type, answer_data, correct, epochStartSeconds, epochEndSeconds, reward, correct_limit);\n\n                try {\n                    const { request } = await publicClient.simulateContract({\n                        account,\n                        address: quiz_address,\n                        abi: quiz_abi,\n                        functionName: \"edit_quiz\",\n                        args: [id, owner, title, explanation, thumbnail_url, content, epochStartSeconds, epochEndSeconds],\n                        //args: [\"a\", \"a\", \"a\", \"a\", 1, \"a\", \"a\", epochStartSeconds, epochEndSeconds, 2, 2],\n                    });\n\n                    return await walletClient.writeContract(request);\n                } catch (e) {\n                    console.log(e);\n                }\n            } else {\n                console.log(\"Ethereum object does not exist\");\n            }\n        } catch (err) {\n            console.log(err);\n        }\n    }\n\n    async create_answer(id, answer, setShow, setContent) {\n        console.log(id, answer);\n        try {\n            if (ethereum) {\n                let account = await this.get_address();\n\n                setShow(true);\n                setContent(\"書き込み中...\");\n                let hash = await this._save_answer(account, id, answer);\n\n                if (hash) {\n                    // const res1 = await quiz.read.post_answer_view({account,args:[id, answer.toString()]})\n                    // console.log(res1);\n                    // if (res1 == true) {\n                    //     setContent(\"正解です！待機すると、マイページに遷移します\");\n                    // }\n                    // else {\n                    //     setContent(\"不正解です。待機すると、マイページに遷移します\");\n                    // }\n                    let res = await publicClient.waitForTransactionReceipt({ hash });\n                    console.log(res);\n                    //document.location.href = \"/user_page/\" + account;\n                    document.location.href = homeUrl + \"/list_quiz\";\n                }\n                console.log(\"create_answer_cont\");\n            } else {\n                console.log(\"Ethereum object does not exist\");\n            }\n        } catch (err) {\n            console.log(err);\n        }\n        setShow(false);\n    }\n\n    async _save_answer(account, id, answer) {\n        try {\n            const { request } = await publicClient.simulateContract({\n                account,\n                address: quiz_address,\n                abi: quiz_abi,\n                functionName: \"save_answer\",\n                args: [id, answer.toString()],\n            });\n            console.log(\"正常そう\");\n            return await walletClient.writeContract(request);\n        } catch (e) {\n            console.log(e);\n        }\n    }\n\n    async _post_answer(account, id, answer) {\n        try {\n            const { request } = await publicClient.simulateContract({\n                account,\n                address: quiz_address,\n                abi: quiz_abi,\n                functionName: \"post_answer\",\n                args: [id, answer.toString()],\n            });\n            console.log(\"正常そう\");\n            return await walletClient.writeContract(request);\n        } catch (e) {\n            console.log(e);\n        }\n    }\n\n    async get_quiz_all_data(id) {\n        return await quiz.read.get_quiz_all_data({ args: [id] });\n    }\n\n    async get_quiz(id) {\n        const answer_typr = await quiz.read.get_quiz_answer_type({ args: [id] });\n        const res = await quiz.read.get_quiz({ args: [id] });\n        const res2 = await this.get_confirm_answer(id);\n        return [...res, answer_typr, ...res2];\n    }\n\n    async get_quiz_simple(id) {\n        return await quiz.read.get_quiz_simple({ args: [id] });\n    }\n\n    async get_is_payment(id) {\n        return await quiz.read.get_is_payment({ args: [id] });\n    }\n\n    async get_confirm_answer(id) {\n        return await quiz.read.get_confirm_answer({ args: [id] });\n    }\n\n    async get_quiz_all_data_list(start, end) {\n        //取得したクイズを格納する配列\n        let res = [];\n        let account = await this.get_address();\n\n        console.log(start, end);\n        if (start <= end) {\n            for (let i = start; i < end; i++) {\n                console.log(i);\n                res.push(await quiz.read.get_quiz_all_data({ account, args: [i] }));\n                console.log(res);\n            }\n        } else {\n            for (let i = start - 1; i >= end; i--) {\n                console.log(i);\n                res.push(await quiz.read.get_quiz_all_data({ account, args: [i] }));\n                console.log(res);\n            }\n        }\n        return res;\n    }\n\n    //startからendまでのクイズを取得\n\n    async get_quiz_list(start, end) {\n        //取得したクイズを格納する配列\n        let res = [];\n        let account = await this.get_address();\n\n        console.log(start, end);\n        if (start <= end) {\n            for (let i = start; i < end; i++) {\n                console.log(i);\n                res.push(await quiz.read.get_quiz_simple({ account, args: [i] }));\n                console.log(res);\n            }\n        } else {\n            for (let i = start - 1; i >= end; i--) {\n                console.log(i);\n                res.push(await quiz.read.get_quiz_simple({ account, args: [i] }));\n                console.log(res);\n            }\n        }\n        return res;\n    }\n\n    async get_quiz_length() {\n        return await quiz.read.get_quiz_length();\n    }\n\n    async get_num_of_students() {\n        return Number(await quiz.read.get_num_of_students());\n    }\n\n    async add_student(address) {\n        console.log(address);\n        try {\n            if (ethereum) {\n                try {\n                    let account = await this.get_address();\n                    const { request } = await publicClient.simulateContract({\n                        account,\n                        address: quiz_address,\n                        abi: quiz_abi,\n                        functionName: \"add_student\",\n                        args: [address],\n                    });\n                    return await walletClient.writeContract(request);\n                } catch (e) {\n                    console.log(e);\n                }\n            } else {\n                console.log(\"Ethereum object does not exist\");\n            }\n        } catch (err) {\n            console.log(err);\n        }\n    }\n\n    async add_teacher(address) {\n        try {\n            if (ethereum) {\n                try {\n                    let account = await this.get_address();\n                    const { request } = await publicClient.simulateContract({\n                        account,\n                        address: quiz_address,\n                        abi: quiz_abi,\n                        functionName: \"add_teacher\",\n                        args: [address],\n                    });\n                    return await walletClient.writeContract(request);\n                } catch (e) {\n                    console.log(e);\n                }\n            } else {\n                console.log(\"Ethereum object does not exist\");\n            }\n        } catch (err) {\n            console.log(err);\n        }\n    }\n\n    async get_teachers() {\n        try {\n            if (ethereum) {\n                let account = await this.get_address();\n                return await quiz.read.get_teacher_all({ account, args: [] });\n            } else {\n                console.log(\"Ethereum object does not exist\");\n            }\n        } catch (err) {\n            console.log(err);\n        }\n    }\n\n    async get_results() {\n        try {\n            if (ethereum) {\n                let account = await this.get_address();\n                let res = await quiz.read.get_student_results({ account, args: [] });\n                console.log(res);\n                return res;\n            } else {\n                console.log(\"Ethereum object does not exist\");\n            }\n        } catch (err) {\n            console.log(err);\n        }\n    }\n\n    async isTeacher() {\n        try {\n            if (ethereum) {\n                let account = await this.get_address();\n                return await quiz.read._isTeacher({ account, args: [] });\n            } else {\n                console.log(\"Ethereum object does not exist\");\n            }\n        } catch (err) {\n            console.log(err);\n        }\n    }\n\n    async get_only_student_results() {\n        try {\n            if (ethereum) {\n                let account = await this.get_address();\n                let res = await quiz.read.get_only_student_results({ account, args: [] });\n                console.log(res);\n                for (let i = 0; i < res.length; i++) {\n                    res[i] = Number(res[i]);\n                }\n                await res.sort(function (a, b) {\n                    return b - a;\n                });\n                console.log(res);\n                return res;\n            } else {\n                console.log(\"Ethereum object does not exist\");\n            }\n        } catch (err) {\n            console.log(err);\n        }\n    }\n\n    async get_rank(result) {\n        try {\n            if (ethereum) {\n                let results = await this.get_only_student_results();\n                for (let i = 0; i < results.length; i++) {\n                    if (result == results[i]) return i + 1;\n                }\n            } else {\n                console.log(\"Ethereum object does not exists\");\n            }\n        } catch (err) {\n            console.log(err);\n        }\n    }\n\n    async get_respondentCount_and_respondentLimit(id) {\n        return await quiz.read.get_respondentCount_and_respondentLimit({ args: [id] });\n    }\n    //ここから変更\n    async get_student_answer_hash(student, id) {\n        try {\n            if (ethereum) {\n                let account = await this.get_address();\n                let res = await quiz.read.get_student_answer_hash({ account, args: [student, id] });\n                return res;\n            } else {\n                console.log(\"Ethereum object does not exists\");\n            }\n        } catch (err) {\n            console.log(err);\n        }\n    }\n\n\n    async get_student_list() {\n        try {\n            if (ethereum) {\n                let account = await this.get_address();\n                let res = await quiz.read.get_student_all({ account, args: [] });\n                return res;\n            } else {\n                console.log(\"Ethereum object does not exists\");\n            }\n        } catch (err) {\n            console.log(err);\n        }\n    }\n\n    async get_students_answer_hash_list(students, id) {\n        try {\n            if (ethereum) {\n                let res = {};\n                console.log(students[1]);\n                for (let i = 0; i < students.length; i++) {\n                    res[students[i]] = await this.get_student_answer_hash(students[i], id);\n                }\n                return res;\n            } else {\n                console.log(\"Ethereum object does not exists\");\n            }\n        } catch (err) {\n            console.log(err);\n        }\n    }\n    //ここまで変更\n\n    async get_data_for_survey_users() {\n        try {\n            if (ethereum) {\n                let account = await this.get_address();\n                let res = await quiz.read.get_data_for_survey_users({ account, args: [] });\n                return res;\n            } else {\n                console.log(\"Ethereum object does not exists\");\n            }\n        } catch (err) {\n            console.log(err);\n        }\n    }\n    async get_data_for_survey_quizs() {\n        try {\n            if (ethereum) {\n                let account = await this.get_address();\n                let res = await quiz.read.get_data_for_survey_quizs({ account, args: [] });\n                return res;\n            } else {\n                console.log(\"Ethereum object does not exists\");\n            }\n        } catch (err) {\n            console.log(err);\n        }\n    }\n\n    async create_bulk_quizzes(mainTitle, titles, explanations, thumbnailUrls, contents, answerTypes, answerDataArray, corrects, replyStartline, replyDeadline, reward, correctLimit, setShow) {\n        // 基本的な引数の型とフォーマットのチェック\n        if (typeof mainTitle !== 'string') throw new Error('mainTitle must be a string');\n        if (!Array.isArray(titles) || !titles.every(t => typeof t === 'string')) throw new Error('titles must be an array of strings');\n        if (!Array.isArray(explanations) || !explanations.every(e => typeof e === 'string')) throw new Error('explanations must be an array of strings');\n        if (!Array.isArray(thumbnailUrls) || !thumbnailUrls.every(t => typeof t === 'string')) throw new Error('thumbnailUrls must be an array of strings');\n        if (!Array.isArray(contents) || !contents.every(c => typeof c === 'string')) throw new Error('contents must be an array of strings');\n        if (!Array.isArray(answerTypes) || !answerTypes.every(a => typeof a === 'number')) throw new Error('answerTypes must be an array of numbers');\n        if (!Array.isArray(answerDataArray) || !answerDataArray.every(a => typeof a === 'string')) throw new Error('answerDataArray must be an array of strings');\n        if (!Array.isArray(corrects) || !corrects.every(c => typeof c === 'string')) throw new Error('corrects must be an array of strings');\n        if (typeof replyStartline !== 'string' || isNaN(Date.parse(replyStartline))) throw new Error('replyStartline must be a valid date string');\n        if (typeof replyDeadline !== 'string' || isNaN(Date.parse(replyDeadline))) throw new Error('replyDeadline must be a valid date string');\n        if (typeof reward !== 'number') throw new Error('reward must be a number');\n        if (typeof correctLimit !== 'number') throw new Error('correctLimit must be a number');\n        if (typeof setShow !== 'function') throw new Error('setShow must be a function');\n    \n        // 配列の長さのチェック\n        const arrayLength = titles.length;\n        if (![explanations, thumbnailUrls, contents, answerTypes, answerDataArray, corrects].every(arr => arr.length === arrayLength)) {\n            throw new Error('All input arrays must have the same length');\n        }\n        \n        setShow(true);\n        let res = null;\n        let hash = null;\n        reward = reward * 10 ** 18;\n    \n        const dateStartObj = new Date(replyStartline);\n        const dateEndObj = new Date(replyDeadline);\n        const epochStartSeconds = Math.floor(dateStartObj.getTime() / 1000);\n        const epochEndSeconds = Math.floor(dateEndObj.getTime() / 1000);\n    \n        const quizDataArray = titles.map((title, index) => ({\n            title: title,\n            explanation: explanations[index],\n            thumbnail_url: thumbnailUrls[index],\n            content: contents[index],\n            answer_type: answerTypes[index],\n            answer_data: answerDataArray[index],\n            answer: corrects[index]\n        }));\n    \n        try {\n            if (ethereum) {\n                let account = await this.get_address();\n                let approval = await token.read.allowance({ account, args: [account, quiz_address] });\n    \n                if (Number(approval) >= Number(reward * correctLimit * quizDataArray.length)) {\n                    hash = await this._create_bulk_quizzes(account, mainTitle, quizDataArray, epochStartSeconds, epochEndSeconds, reward, correctLimit);\n                    if (hash) {\n                        res = await publicClient.waitForTransactionReceipt({ hash });\n                    }\n                } else {\n                    hash = await this.approve(account, reward * correctLimit * quizDataArray.length);\n                    if (hash) {\n                        res = await publicClient.waitForTransactionReceipt({ hash });\n                        hash = await this._create_bulk_quizzes(account, mainTitle, quizDataArray, epochStartSeconds, epochEndSeconds, reward, correctLimit);\n                        if (hash) {\n                            res = await publicClient.waitForTransactionReceipt({ hash });\n                        }\n                    }\n                }\n            } else {\n                setShow(false);\n                console.log(\"Ethereum object does not exist\");\n            }\n        } catch (err) {\n            setShow(false);\n            console.log(err);\n        }\n        document.location.href = homeUrl + \"/list_quiz\";\n    }\n    \n    // _create_bulk_quizzes ヘルパー関数\n    async _create_bulk_quizzes(account, mainTitle, quizDataArray, startlineAfterEpoch, timelimitAfterEpoch, reward, respondentLimit) {\n        try {\n            const { request } = await publicClient.simulateContract({\n                account,\n                address: quiz_address,\n                abi: quiz_abi,\n                functionName: \"create_bulk_quizzes\",\n                args: [mainTitle, quizDataArray, startlineAfterEpoch, timelimitAfterEpoch, reward, respondentLimit]\n            });\n            return await walletClient.writeContract(request);\n        } catch (e) {\n            console.log(\"Error in _create_bulk_quizzes\", e);\n        }\n    }\n\n    async bulkSubmitAnswers(answers) {\n        if (!ethereum) return console.error(\"Ethereum provider is not available\");\n        try {\n            const account = await this.get_address();\n            const { request } = await publicClient.simulateContract({\n                account,\n                address: quiz_address,\n                abi: quiz_abi,\n                functionName: \"bulkSubmitAnswers\",\n                args: [answers]\n            });\n            return await walletClient.writeContract(request);\n        } catch (e) {\n            console.error(\"Error in bulkSubmitAnswers:\", e);\n        }\n    }\n\n    async distributeRewards(quizId, winners) {\n        if (!ethereum) return console.error(\"Ethereum provider is not available\");\n        try {\n            const account = await this.get_address();\n            const { request } = await publicClient.simulateContract({\n                account,\n                address: quiz_address,\n                abi: quiz_abi,\n                functionName: \"distributeRewards\",\n                args: [quizId, winners]\n            });\n            return await walletClient.writeContract(request);\n        } catch (e) {\n            console.error(\"Error in distributeRewards:\", e);\n        }\n    }\n}\n\nexport { Contracts_MetaMask };"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}